package s_lqcd;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEComplex;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEComplexType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;

public class DFEHalfSpinor extends KernelLib {

	private static final DFEComplexType m_cplxType =
		new DFEComplexType(dfeFloat(8,24));

	public DFESu3Vector s0, s1;

	private final Kernel owner_kernel;

	protected DFEHalfSpinor(Kernel Owner) {
		super(Owner);
		owner_kernel = Owner;
	}

	protected DFEHalfSpinor(Kernel Owner, DFEVector<DFEComplex> in) {
		super(Owner);
		owner_kernel = Owner;
		s0 = new DFESu3Vector (Owner);
		s1 = new DFESu3Vector (Owner);

		s0.c0 = in[0];
		s0.c1 = in[1];
		s0.c2 = in[2];

		s1.c0 = in[3];
		s1.c1 = in[4];
		s1.c2 = in[5];

	}

	public void newInstant() {
		s0 = new DFESu3Vector (owner_kernel);
		s1 = new DFESu3Vector (owner_kernel);
	}

	public void connect (DFEHalfSpinor a) {
		s0 <== a.s0;
		s1 <== a.s1;
	}

	static public DFEVectorType<DFEComplex> getDFEHalfSpinorType () {
		DFEVectorType<DFEComplex> type =
			new DFEVectorType<DFEComplex>(m_cplxType, 2*3);
		return type;
	}

	public DFEHalfSpinor streamoffset(int offset) {
		DFEHalfSpinor temp = new DFEHalfSpinor(owner_kernel);
		temp.s0 = new DFESu3Vector(owner_kernel);
		temp.s1 = new DFESu3Vector(owner_kernel);

		temp.s0.c0 = stream.offset(s0.c0, offset);
		temp.s0.c1 = stream.offset(s0.c1, offset);
		temp.s0.c2 = stream.offset(s0.c2, offset);
		temp.s1.c0 = stream.offset(s1.c0, offset);
		temp.s1.c1 = stream.offset(s1.c1, offset);
		temp.s1.c2 = stream.offset(s1.c2, offset);

		return temp;
	}

	public DFEVector<DFEComplex> convertToDFEVector () {
		DFEVector<DFEComplex> result = getDFEHalfSpinorType().newInstance(owner_kernel);

		result[0]  <== s0.c0;
		result[1]  <== s0.c1;
		result[2]  <== s0.c2;
		result[3]  <== s1.c0;
		result[4]  <== s1.c1;
		result[5]  <== s1.c2;

		return result;
	}

}
