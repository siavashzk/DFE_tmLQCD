package s_lqcd;

import com.maxeler.maxcompiler.v0.utils.MathUtils;
import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.RoundingMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEComplex;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEComplexType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;

class S_LQCDKernel extends Kernel {


	private static final DFEComplexType m_cplxType =
		new DFEComplexType(dfeFloat(8,24));

	public enum Mode {
		TIMES, SUB
	}

	public enum EO {
		EVENODD, ODDEVEN
	}

	protected S_LQCDKernel(
			KernelParameters parameters,
			int T,
			int LX,
			int LY,
			int LZ,
			int numPipes,
			int loopOffset,
			Mode mode,
			EO ieo,
			boolean passGauge
			)
	{

		super(parameters);

		QCDScalars scalars = new QCDScalars(
				this,
				LX,
				LY,
				LZ,
				T,
				numPipes,
				loopOffset);

		HalfSpinorBuffer buffer = new HalfSpinorBuffer(scalars);

		optimization.pushPipeliningFactor(0.1);
		CounterChain tickChain = control.count.makeCounterChain();
		DFEVar tick = tickChain.addCounter(
				( 8 * (T+2)*LX*LY*LZ/2) + 8*loopOffset + 2,
				1);

		DFEVar writeChainEnable = tick < ( 8*(T+2)*LX*LY*LZ/2 ) ;
		DFEVar readChainEnable  = tick > ( 8*2*LX*LY*LZ/2 + 8*loopOffset + 1) ;


		CounterChain writeChain = control.count.makeCounterChain(writeChainEnable);
		DFEVar t = writeChain.addCounter(T+2, 1);
		DFEVar x = writeChain.addCounter(LX, 1);
		DFEVar y = writeChain.addCounter(LY, 1);
		DFEVar z = writeChain.addCounter(LZ/2, 1);
		DFEVar mu = writeChain.addCounter(8, 1);

		DFEVar isOddRow = (t&1).cast(dfeBool()) ^
		                  (x&1).cast(dfeBool()) ^
		                  (y&1).cast(dfeBool()) ;
		if (ieo == EO.EVENODD) isOddRow = isOddRow ^ 1;

		DFEVector<DFEComplex> spinor_in =
			io.input(
				parameters.getName()+"_spinor_in",
				DFESpinor.getDFESpinorType(),
				writeChainEnable & (mu===0)
				);
		DFEVector<DFEComplex> gauge0_in =
			io.input(
					parameters.getName()+"_gauge0",
					DFESu3.getDFESu3Type(),
					writeChainEnable & ((mu&1)===0) );
		DFEVector<DFEComplex> gauge1_in =
			io.input(
					parameters.getName()+"_gauge1",
					DFESu3.getDFESu3Type(),
					writeChainEnable & ((mu&1)===1));

		/*DFEVector<DFEComplex> p_spinor_in = null;
		if (mode == Mode.SUB ) {
			p_spinor_in = io.input(
			parameters.getName()+"_p_spinor_in",
			DFESpinor.getDFESpinorType(),
			~isOnBoundary);
		}*/

		DFEVar cfactor_r = io.scalarInput("cfactor", dfeFloat(8,24) );
		DFEVar ka0_r     = io.scalarInput("ka0", dfeFloat(8,24) );
		DFEVar ka1_r     = io.scalarInput("ka1", dfeFloat(8,24) );
		DFEVar ka2_r     = io.scalarInput("ka2", dfeFloat(8,24) );
		DFEVar ka3_r     = io.scalarInput("ka3", dfeFloat(8,24) );

		DFEComplex cfactor = m_cplxType.newInstance(this);
		cfactor.setReal(cfactor_r);
		cfactor.setImaginary(constant.var(dfeFloat(8,24),0));
		DFEComplex ka0 = m_cplxType.newInstance(this);
		ka0.setReal(ka0_r);
		ka0.setImaginary(constant.var(dfeFloat(8,24),0));
		DFEComplex ka1 = m_cplxType.newInstance(this);
		ka1.setReal(ka1_r);
		ka1.setImaginary(constant.var(dfeFloat(8,24),0));
		DFEComplex ka2 = m_cplxType.newInstance(this);
		ka2.setReal(ka2_r);
		ka2.setImaginary(constant.var(dfeFloat(8,24),0));
		DFEComplex ka3 = m_cplxType.newInstance(this);
		ka3.setReal(ka3_r);
		ka3.setImaginary(constant.var(dfeFloat(8,24),0));

		DFESpinor k = new DFESpinor(this, spinor_in);
		DFESu3 gauge0 = new DFESu3(this, gauge0_in);
		DFESu3 gauge1 = new DFESu3(this, gauge1_in);
		DFESpinor p = null;
		/*if (mode == Mode.SUB ) {
			p = new DFESpinor(this, p_spinor_in);
		}*/

		DFESu3Vector alpha, beta;
		DFESu3Vector psi, psi2, chi, chi2;
		DFESu3 g;
		DFEComplex ka = m_cplxType.newInstance(this);

		DFEHalfSpinor phi = new DFEHalfSpinor(this);

		DFEQCDSelector isForward = new DFEQCDSelector( this, (mu & 1) === 0 );
		DFEQCDSelector dir02 = new DFEQCDSelector( this, (mu & 2) !== 2 );
		DFEQCDSelector dir03 = new DFEQCDSelector( this, mu <= 1 | mu >= 6 );
		DFEQCDSelector mu0257 = new DFEQCDSelector( this, mu===0 | mu===2 | mu===5 | mu===7 );

		alpha  = k.s0;
		beta   = dir03     ? k.s2 : k.s3 ;
		beta   = isForward ? beta : -beta ;
		beta   = dir02     ? beta : beta.mult_i() ;
		psi    = alpha + beta;
		g      = isForward ? gauge0 : gauge1.adjoint() ;
		chi2   = g * psi;
		ka     = isForward ? ka0 : ka0.conjugate();
		phi.s0 = chi2.times_complex(ka);


		alpha  = k.s1;
		beta   = dir03  ? k.s3 : k.s2 ;
		beta   = mu0257 ? beta : -beta ;
		beta   = dir02  ? beta : beta.mult_i() ;
		psi    = alpha + beta;
		g      = isForward ? gauge0 : gauge1.adjoint() ;
		chi    = g * psi;
		ka     = isForward ? ka0 : ka0.conjugate();
		phi.s1 = chi.times_complex(ka);

		buffer.setBufferIn(phi);
		buffer.setWriteCoordinates(t, x, y, z, mu);

		/*debug.simPrintf(
				t !== 0 & t !== T+1 ,
				"dfe pre %f %f\n",
				phi.s0.c0.getReal(),
				phi.s0.c0.getImaginary());*/

		DFEVar loopOffset_ = constant.var(
				dfeUInt(MathUtils.bitsToRepresent(loopOffset)),
				loopOffset
				);
		DFEVar LZH_ = constant.var(
				dfeUInt( MathUtils.bitsToRepresent(LZ/2)),
				LZ/2
				);

		CounterChain chain2 = control.count.makeCounterChain(readChainEnable);
		DFEVar tr  = chain2.addCounter(T, 1);
		DFEVar xr  = chain2.addCounter(LX, 1);
		DFEVar yzr  = (LY*LZ/2 > loopOffset) ?
					chain2.addCounter(LY*LZ/2/loopOffset, 1) : constant.var(0);
		DFEVar mur = chain2.addCounter(8, 1);
		DFEVar yzrloop = chain2.addCounter(loopOffset, 1);

		optimization.pushEnableBitGrowth(true);
		optimization.pushRoundingMode(RoundingMode.TRUNCATE);

		yzr = yzr * loopOffset_ + yzrloop;
		DFEVar yr = (yzr / (LZH_))
		            .cast(dfeUInt(MathUtils.bitsToAddress(LY)));
		DFEVar zr = (yzr - yr * LZH_)
		            .cast(dfeUInt(MathUtils.bitsToAddress(LZ/2)));

		optimization.popRoundingMode();
		optimization.popEnableBitGrowth();

		tr = tr.cast(dfeUInt(MathUtils.bitsToAddress(T+2)));
		xr = xr.cast(dfeUInt(MathUtils.bitsToAddress(LX)));

		buffer.setReadCoordinates(tr+1, xr, yr, zr);

		DFEHalfSpinor phiCurr = buffer.getBufferOut(mur);

		/*debug.simPrintf(
				readChainEnable,
				"dfe post %f %f\n",
				phiCurr.s0.c0.getReal(),
				phiCurr.s0.c0.getImaginary());*/

		DFEQCDSelector newSum = new DFEQCDSelector (this, mur===0 );
		DFEQCDSelector acc_dir12 = new DFEQCDSelector (this, mur>=2 & mur<=5 );
		DFEQCDSelector acc_dir13 = new DFEQCDSelector (this, (mur&2) === 2 );
		DFEQCDSelector acc_mu1246 = new DFEQCDSelector (
				this,
				mur===1 | mur===2 | mur===4 | mur===6
				);
		DFEQCDSelector acc_mu1257 = new DFEQCDSelector (
				this,
				mur===1 | mur===2 | mur===5 | mur===7
				);

		DFESpinor rs = new DFESpinor(this);
		rs.newInstant();
		DFESpinor addend = new DFESpinor(this);
		DFESpinor accumulator = new DFESpinor(this);

		addend.s0 = phiCurr.s0;
		addend.s1 = phiCurr.s1;

		addend.s2 = acc_dir12 ? phiCurr.s1 : phiCurr.s0 ;
		addend.s2 = acc_dir13 ? addend.s2.mult_i() : addend.s2 ;
		addend.s2 = acc_mu1246 ? -addend.s2 : addend.s2 ;

		addend.s3 = acc_dir12 ? phiCurr.s0 : phiCurr.s1 ;
		addend.s3 = acc_dir13 ? addend.s3.mult_i() : addend.s3 ;
		addend.s3 = acc_mu1257 ? -addend.s3 : addend.s3 ;

		accumulator = rs.streamoffset(-loopOffset) + addend;

		rs.s0 <== newSum ? phiCurr.s0 : accumulator.s0;
		rs.s1 <== newSum ? phiCurr.s1 : accumulator.s1;
		rs.s2 <== newSum ? phiCurr.s0 : accumulator.s2;
		rs.s3 <== newSum ? phiCurr.s1 : accumulator.s3;

		DFESpinor result = new DFESpinor(this);
		if (mode == Mode.TIMES) {
			result.s0 = rs.s0.times_complex(cfactor);
			result.s1 = rs.s1.times_complex(cfactor);
			result.s2 = rs.s2.times_complexcjg(cfactor);
			result.s3 = rs.s3.times_complexcjg(cfactor);
		} else if (mode == Mode.SUB) {
			psi = p.s0.times_complex(cfactor);
			result.s0 = psi.sub(rs.s0);
			psi2 = p.s1.times_complex(cfactor);
			result.s1 = psi2.sub(rs.s1);
			psi = p.s2.times_complexcjg(cfactor);
			result.s2 = rs.s2.sub(psi);
			psi2 = p.s3.times_complexcjg(cfactor);
			result.s3 = rs.s3.sub(psi2);
		}
		DFEVector<DFEComplex> spinor_out = result.convertToDFEVector();

		io.output(
				parameters.getName()+"_spinor_out",
				spinor_out,
				DFESpinor.getDFESpinorType(),
				(readChainEnable & (mur===7) )
				);

		if (passGauge == true) {
			io.output(
					parameters.getName()+"_gauge0_out",
					gauge0_in,
					DFEGauge.getDFEGaugeType());
			io.output(
					parameters.getName()+"_gauge1_out",
					gauge1_in,
					DFEGauge.getDFEGaugeType());
			if (mode == Mode.TIMES) {
				io.output(
						parameters.getName()+"_p_spinor_out",
						spinor_in,
						DFESpinor.getDFESpinorType());
			}
		}

	}

}
