package s_lqcd;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEComplex;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEComplexType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;

public class DFESu3 extends KernelLib  {

	public DFEComplex c00, c01, c02,
	                  c10, c11, c12,
	                  c20, c21, c22;

	private final Kernel owner_kernel;
	private final static DFEComplexType m_cplxType = new DFEComplexType(dfeFloat(8,24));

	protected DFESu3(Kernel Owner) {
		super(Owner);
		owner_kernel = Owner;
		c00 = m_cplxType.newInstance(Owner);
		c01 = m_cplxType.newInstance(Owner);
		c02 = m_cplxType.newInstance(Owner);
		c10 = m_cplxType.newInstance(Owner);
		c11 = m_cplxType.newInstance(Owner);
		c12 = m_cplxType.newInstance(Owner);
		c20 = m_cplxType.newInstance(Owner);
		c21 = m_cplxType.newInstance(Owner);
		c22 = m_cplxType.newInstance(Owner);
	}

	protected DFESu3(Kernel Owner, DFEVector<DFEComplex> su3) {
		super(Owner);
		owner_kernel = Owner;
		c00 = m_cplxType.newInstance(Owner);
		c01 = m_cplxType.newInstance(Owner);
		c02 = m_cplxType.newInstance(Owner);
		c10 = m_cplxType.newInstance(Owner);
		c11 = m_cplxType.newInstance(Owner);
		c12 = m_cplxType.newInstance(Owner);
		c20 = m_cplxType.newInstance(Owner);
		c21 = m_cplxType.newInstance(Owner);
		c22 = m_cplxType.newInstance(Owner);

		c00 = su3[0];
		c01 = su3[1];
		c02 = su3[2];
		c10 = su3[3];
		c11 = su3[4];
		c12 = su3[5];
		c20 = su3[6];
		c21 = su3[7];
		c22 = su3[8];
	}

	public DFESu3 conjugate () {
		DFESu3 temp = new DFESu3(owner_kernel);
		temp.c00 = c00.conjugate();
		temp.c01 = c01.conjugate();
		temp.c02 = c02.conjugate();
		temp.c10 = c10.conjugate();
		temp.c11 = c11.conjugate();
		temp.c12 = c12.conjugate();
		temp.c20 = c20.conjugate();
		temp.c21 = c21.conjugate();
		temp.c22 = c22.conjugate();
		return temp;
	}

	public DFESu3Vector mul (DFESu3Vector a) {
		DFESu3Vector temp = new DFESu3Vector(owner_kernel);
		temp.c0 = c00 * a.c0 + c01 *a.c1 + c02 * a.c2;
		temp.c1 = c10 * a.c0 + c11 *a.c1 + c12 * a.c2;
		temp.c2 = c20 * a.c0 + c21 *a.c1 + c22 * a.c2;
		return temp;
	}

	public DFESu3Vector inverse_multiply (DFESu3Vector a) {
		DFESu3Vector temp = new DFESu3Vector(owner_kernel);
		temp.c0 = c00.conjugate() * a.c0 + c10.conjugate() *a.c1 + c20.conjugate() * a.c2;
		temp.c1 = c01.conjugate() * a.c0 + c11.conjugate() *a.c1 + c21.conjugate() * a.c2;
		temp.c2 = c02.conjugate() * a.c0 + c12.conjugate() *a.c1 + c22.conjugate() * a.c2;
		return temp;
	}

	public DFESu3 adjoint () {
		DFESu3 temp = new DFESu3(owner_kernel);
		temp.c00 = c00.conjugate();
		temp.c01 = c10.conjugate();
		temp.c02 = c20.conjugate();
		temp.c10 = c01.conjugate();
		temp.c11 = c11.conjugate();
		temp.c12 = c21.conjugate();
		temp.c20 = c02.conjugate();
		temp.c21 = c12.conjugate();
		temp.c22 = c22.conjugate();
		return temp;
	}

	public DFESu3 transpose () {
		DFESu3 temp = new DFESu3(owner_kernel);
		temp.c00 = c00;
		temp.c01 = c10;
		temp.c02 = c20;
		temp.c10 = c01;
		temp.c11 = c11;
		temp.c12 = c21;
		temp.c20 = c02;
		temp.c21 = c12;
		temp.c22 = c22;
		return temp;
	}

	static public DFESu3 muxselect(Kernel Owner, DFEVar cond, DFESu3 a, DFESu3 b) {
		DFESu3 temp = new DFESu3(Owner);

		temp.c00 = cond ? a.c00 : b.c00;
		temp.c01 = cond ? a.c01 : b.c01;
		temp.c02 = cond ? a.c02 : b.c02;
		temp.c10 = cond ? a.c10 : b.c10;
		temp.c11 = cond ? a.c11 : b.c11;
		temp.c12 = cond ? a.c12 : b.c12;
		temp.c20 = cond ? a.c20 : b.c20;
		temp.c21 = cond ? a.c21 : b.c21;
		temp.c22 = cond ? a.c22 : b.c22;

		return temp;
	}

	static public DFEVectorType<DFEComplex> getDFESu3Type () {
		DFEVectorType<DFEComplex> type =
			new DFEVectorType<DFEComplex>(m_cplxType,9);
		return type;
	}
}
